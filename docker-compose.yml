version: '3.8'

# Docker Compose configuration for Analytics Platform
# Note: Neo4j and n8n services are NOT included here as they should be existing containers
# The app connects to external Neo4j and n8n containers via host.docker.internal

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: analytics_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: analytics
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password123
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3



  # Frontend & Backend Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: analytics_app
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://postgres:password123@postgres:5432/analytics
      NEO4J_URI: bolt://host.docker.internal:7687
      NEO4J_USERNAME: neo4j
      NEO4J_PASSWORD: password123
      N8N_BASE_URL: http://host.docker.internal:5678
      N8N_API_KEY: your-n8n-api-key-here
      N8N_WORKFLOW_ID: your-workflow-id-here
      SESSION_SECRET: your-very-secure-session-secret-here
      REPLIT_DOMAINS: localhost
      ISSUER_URL: https://replit.com/oidc
      REPL_ID: your-repl-id-here
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local

networks:
  default:
    name: analytics_network